import Utils from '../utils.js';

class DailyPage {
    constructor() {
        this.timers = {};
        this.pomodoroCount = 0;
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadPomodoroCount();
        console.log('Daily page initialized');
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('timer-btn')) {
                const type = e.target.getAttribute('data-timer-type');
                const minutes = parseInt(e.target.getAttribute('data-minutes'));
                
                if (type && minutes && e.target.textContent.includes('–ó–∞–ø—É—Å—Ç–∏—Ç—å')) {
                    this.startTimer(type, minutes);
                } else if (type && e.target.textContent.includes('–ü–µ—Ä–µ—Ä—ã–≤')) {
                    this.startTimer(type, minutes);
                } else if (type) {
                    this.stopTimer(type);
                }
            }
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.savePomodoroCount();
        });
    }

    startTimer(type, minutes) {
        if (this.timers[type]) {
            clearInterval(this.timers[type]);
        }
        
        const timerDisplay = document.getElementById(`${type}-timer`);
        if (!timerDisplay) return;
        
        let seconds = minutes * 60;
        
        timerDisplay.style.color = '#e74c3c';
        timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:00`;
        
        this.timers[type] = setInterval(() => {
            seconds--;
            const mins = Math.floor(seconds / 60);
            const secs = seconds % 60;
            
            timerDisplay.textContent = `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
            
            if (seconds <= 0) {
                clearInterval(this.timers[type]);
                timerDisplay.textContent = "00:00";
                timerDisplay.style.color = '#2ecc71';
                
                this.handleTimerComplete(type, minutes);
            }
        }, 1000);
    }

    handleTimerComplete(type, minutes) {
        if (type === 'pomodoro' && minutes === 25) {
            this.pomodoroCount++;
            this.updatePomodoroCounter();
            this.showNotification('üçÖ –ü–æ–º–∏–¥–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!', '–í—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ 5 –º–∏–Ω—É—Ç');
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Ä—ã–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                this.startTimer('pomodoro', 5);
            }, 2000);
            
        } else if (type === 'pomodoro' && minutes === 5) {
            this.showNotification('üîÑ –ü–µ—Ä–µ—Ä—ã–≤ –∑–∞–≤–µ—Ä—à–µ–Ω', '–ì–æ—Ç–æ–≤—ã –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–º–∏–¥–æ—Ä—É?');
            
            // –ü–æ—Å–ª–µ 4 –ø–æ–º–∏–¥–æ—Ä–æ–≤ - –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–µ—Ä—ã–≤
            if (this.pomodoroCount % 4 === 0) {
                this.showNotification('üéâ 4 –ø–æ–º–∏–¥–æ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!', '–í—Ä–µ–º—è –¥–ª—è –¥–ª–∏–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ 15-20 –º–∏–Ω—É—Ç');
            }
            
        } else if (type === 'micro') {
            this.showNotification('‚è±Ô∏è –ú–∏–∫—Ä–æ-–ø–µ—Ä–µ—Ä—ã–≤', '–í—Ä–µ–º—è –≤—Å—Ç–∞—Ç—å, –ø–æ—Ç—è–Ω—É—Ç—å—Å—è –∏ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤!');
        }
    }

    stopTimer(type) {
        if (this.timers[type]) {
            clearInterval(this.timers[type]);
            this.timers[type] = null;
        }
        
        const timerDisplay = document.getElementById(`${type}-timer`);
        if (timerDisplay) {
            if (type === 'micro') {
                timerDisplay.textContent = "60:00";
            } else if (type === 'pomodoro') {
                timerDisplay.textContent = "25:00";
            }
            timerDisplay.style.color = '#2c3e50';
        }
    }

    updatePomodoroCounter() {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –ø–æ–º–∏–¥–æ—Ä–æ–≤
        const counterElement = document.getElementById('pomodoro-counter');
        if (counterElement) {
            counterElement.textContent = `–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–º–∏–¥–æ—Ä–æ–≤: ${this.pomodoroCount}`;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
        this.savePomodoroCount();
    }

    savePomodoroCount() {
        Utils.saveToStorage('pomodoroCount', this.pomodoroCount);
    }

    loadPomodoroCount() {
        const savedCount = Utils.loadFromStorage('pomodoroCount');
        if (savedCount !== null) {
            this.pomodoroCount = savedCount;
            this.updatePomodoroCounter();
        }
    }

    showNotification(title, message) {
        // –ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (Notification.permission === 'granted') {
            new Notification(title, {
                body: message,
                icon: '/assets/images/icon.png'
            });
        } else if (Notification.permission !== 'denied') {
            Notification.requestPermission().then(permission => {
                if (permission === 'granted') {
                    new Notification(title, {
                        body: message,
                        icon: '/assets/images/icon.png'
                    });
                }
            });
        }
        
        // –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏
        alert(`${title}\n${message}`);
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ HTML
    startMicroTimer(minutes) {
        this.startTimer('micro', minutes);
    }

    startPomodoroTimer(minutes) {
        this.startTimer('pomodoro', minutes);
    }

    stopMicroTimer() {
        this.stopTimer('micro');
    }

    stopPomodoroTimer() {
        this.stopTimer('pomodoro');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    window.dailyPage = new DailyPage();
    
    // –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏ –¥–ª—è HTML onclick
    window.startTimer = function(type, minutes) { 
        if (type === 'micro') {
            window.dailyPage.startMicroTimer(minutes);
        } else if (type === 'pomodoro') {
            window.dailyPage.startPomodoroTimer(minutes);
        }
    };
    
    window.stopTimer = function(type) { 
        if (type === 'micro') {
            window.dailyPage.stopMicroTimer();
        } else if (type === 'pomodoro') {
            window.dailyPage.stopPomodoroTimer();
        }
    };
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
export default DailyPage;